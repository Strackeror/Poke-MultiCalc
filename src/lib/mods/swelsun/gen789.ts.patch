diff --git a/node_modules/@smogon/calc/src/mechanics/gen789.ts b/src/lib/mods/swelsun/gen789.ts
index 719f2cd..7c285b5 100644
--- a/node_modules/@smogon/calc/src/mechanics/gen789.ts
+++ b/src/lib/mods/swelsun/gen789.ts
@@ -1,19 +1,18 @@
-import {Generation, AbilityName, StatID, Terrain} from '../data/interface';
-import {toID} from '../util';
+import type {Generation, AbilityName, StatID, Terrain, TypeName} from '@smogon/calc/dist/data/interface';
+import {toID} from '@smogon/calc/dist/util';
 import {
   getBerryResistType,
-  getFlingPower,
+  getFlingPower as getFlingPowerOrig,
   getItemBoostType,
   getMultiAttack,
-  getNaturalGift,
   getTechnoBlast,
   SEED_BOOSTED_STAT,
-} from '../items';
-import {RawDesc} from '../desc';
-import {Field} from '../field';
-import {Move} from '../move';
-import {Pokemon} from '../pokemon';
-import {Result} from '../result';
+} from '@smogon/calc/dist/items';
+import type {RawDesc} from './desc';
+import type {Field} from '@smogon/calc/dist/field';
+import type {Move} from '@smogon/calc/dist/move';
+import type {Pokemon} from '@smogon/calc/dist/pokemon';
+import {Result} from '@smogon/calc/dist/result';
 import {
   chainMods,
   checkAirLock,
@@ -22,7 +21,7 @@ import {
   checkEmbody,
   checkForecast,
   checkInfiltrator,
-  checkIntimidate,
+  checkIntimidate as checkIntimidateOrig,
   checkIntrepidSword,
   checkItem,
   checkMultihitBoost,
@@ -38,12 +37,131 @@ import {
   getMoveEffectiveness,
   getShellSideArmCategory,
   getWeightFactor,
-  handleFixedDamageMoves,
+  handleFixedDamageMoves as handleFixedDamageMovesOrig,
   isGrounded,
   OF16, OF32,
   pokeRound,
   isQPActive,
-} from './util';
+} from '@smogon/calc/dist/mechanics/util';
+
+function getFlingPower(item?: string) {
+  switch (item) {
+    case 'Lucky Punch':
+      return 150;
+    case 'Toxic Plate':
+    case 'Zap Plate':
+    case 'Flame Plate':
+      return 100;
+    case "King's Rock":
+      return 90;
+    case 'Razor Fang':
+      return 70;
+  }
+
+  return getFlingPowerOrig(item);
+}
+
+function handleFixedDamageMoves(attacker: Pokemon, move: Move) {
+  switch (move.name) {
+    case 'Soul Absorb':
+      return attacker.level;
+    case 'Dragon Burst':
+      return 120;
+  }
+  return handleFixedDamageMovesOrig(attacker, move);
+}
+
+function checkIntimidate(gen: Generation, source: Pokemon, target: Pokemon) {
+  if (target.hasAbility("Bird's Eye View")) {
+    return;
+  }
+  checkIntimidateOrig(gen, source, target);
+}
+
+const BERRIES: { [berry: string]: { t: TypeName; p: number } } = {
+  'Aguav Berry': { t: 'Dragon', p: 110 },
+  'Apicot Berry': { t: 'Ground', p: 100 },
+  'Aspear Berry': { t: 'Ice', p: 110 },
+  'Babiri Berry': { t: 'Steel', p: 110 },
+  'Belue Berry': { t: 'Electric', p: 100 },
+  Berry: { t: 'Poison', p: 110 },
+  'Bitter Berry': { t: 'Ground', p: 110 },
+  'Bluk Berry': { t: 'Fire', p: 90 },
+  'Burnt Berry': { t: 'Ice', p: 110 },
+  'Charti Berry': { t: 'Rock', p: 110 },
+  'Cheri Berry': { t: 'Fire', p: 110 },
+  'Chesto Berry': { t: 'Water', p: 110 },
+  'Chilan Berry': { t: 'Normal', p: 110 },
+  'Chople Berry': { t: 'Fighting', p: 110 },
+  'Coba Berry': { t: 'Flying', p: 110 },
+  'Colbur Berry': { t: 'Dark', p: 110 },
+  'Cornn Berry': { t: 'Bug', p: 90 },
+  'Custap Berry': { t: 'Ghost', p: 100 },
+  'Durin Berry': { t: 'Water', p: 100 },
+  'Enigma Berry': { t: 'Bug', p: 100 },
+  'Figy Berry': { t: 'Bug', p: 110 },
+  'Ganlon Berry': { t: 'Ice', p: 100 },
+  'Gold Berry': { t: 'Psychic', p: 110 },
+  'Grepa Berry': { t: 'Flying', p: 90 },
+  'Haban Berry': { t: 'Dragon', p: 110 },
+  'Hondew Berry': { t: 'Ground', p: 90 },
+  'Iapapa Berry': { t: 'Dark', p: 110 },
+  'Ice Berry': { t: 'Grass', p: 110 },
+  'Jaboca Berry': { t: 'Dragon', p: 100 },
+  'Kasib Berry': { t: 'Ghost', p: 110 },
+  'Kebia Berry': { t: 'Poison', p: 110 },
+  'Kee Berry': { t: 'Fairy', p: 100 },
+  'Kelpsy Berry': { t: 'Fighting', p: 90 },
+  'Lansat Berry': { t: 'Flying', p: 100 },
+  'Leppa Berry': { t: 'Fighting', p: 110 },
+  'Liechi Berry': { t: 'Grass', p: 100 },
+  'Lum Berry': { t: 'Flying', p: 110 },
+  'Mago Berry': { t: 'Ghost', p: 110 },
+  'Magost Berry': { t: 'Rock', p: 90 },
+  'Maranga Berry': { t: 'Dark', p: 100 },
+  'Micle Berry': { t: 'Rock', p: 100 },
+  'Mint Berry': { t: 'Water', p: 110 },
+  'Miracle Berry': { t: 'Flying', p: 110 },
+  'Mystery Berry': { t: 'Fighting', p: 110 },
+  'Nanab Berry': { t: 'Water', p: 90 },
+  'Nomel Berry': { t: 'Dragon', p: 90 },
+  'Occa Berry': { t: 'Fire', p: 110 },
+  'Oran Berry': { t: 'Poison', p: 110 },
+  'Pamtre Berry': { t: 'Steel', p: 90 },
+  'Passho Berry': { t: 'Water', p: 110 },
+  'Payapa Berry': { t: 'Psychic', p: 110 },
+  'Pecha Berry': { t: 'Electric', p: 110 },
+  'Persim Berry': { t: 'Ground', p: 110 },
+  'Petaya Berry': { t: 'Poison', p: 100 },
+  'Pinap Berry': { t: 'Grass', p: 90 },
+  'Pomeg Berry': { t: 'Ice', p: 90 },
+  'PRZ Cure Berry': { t: 'Fire', p: 110 },
+  'PSN Cure Berry': { t: 'Electric', p: 110 },
+  'Qualot Berry': { t: 'Poison', p: 90 },
+  'Rabuta Berry': { t: 'Ghost', p: 90 },
+  'Rawst Berry': { t: 'Grass', p: 110 },
+  'Razz Berry': { t: 'Steel', p: 110 },
+  'Rindo Berry': { t: 'Grass', p: 110 },
+  'Roseli Berry': { t: 'Fairy', p: 110 },
+  'Rowap Berry': { t: 'Dark', p: 100 },
+  'Salac Berry': { t: 'Fighting', p: 100 },
+  'Shuca Berry': { t: 'Ground', p: 110 },
+  'Sitrus Berry': { t: 'Psychic', p: 110 },
+  'Spelon Berry': { t: 'Dark', p: 90 },
+  'Starf Berry': { t: 'Psychic', p: 100 },
+  'Tamato Berry': { t: 'Psychic', p: 90 },
+  'Tanga Berry': { t: 'Bug', p: 110 },
+  'Wacan Berry': { t: 'Electric', p: 110 },
+  'Watmel Berry': { t: 'Fire', p: 100 },
+  'Wepear Berry': { t: 'Electric', p: 90 },
+  'Wiki Berry': { t: 'Rock', p: 110 },
+  'Yache Berry': { t: 'Ice', p: 110 }
+};
+
+function getNaturalGift(_: any, item?: string) {
+  const gift = BERRIES[item ?? ''];
+  return gift ?? { t: 'Normal' as TypeName, p: 1 };
+}
 
 export function calculateSMSSSV(
   gen: Generation,
@@ -122,7 +240,7 @@ export function calculateSMSSSV(
     'Light That Burns the Sky',
     'Menacing Moonraze Maelstrom',
     'Moongeist Beam',
-    'Photon Geyser',
+    'Twilight Cannon',
     'Searing Sunraze Smash',
     'Sunsteel Strike'
   );
@@ -153,7 +271,7 @@ export function calculateSMSSSV(
       : 'Normal';
     desc.weather = field.weather;
     desc.moveType = type;
-  } else if (move.named('Judgment') && attacker.item && attacker.item.includes('Plate')) {
+  } else if (move.named('Ancient Force') && attacker.item && attacker.item.includes('Plate')) {
     type = getItemBoostType(attacker.item)!;
   } else if (move.named('Techno Blast') && attacker.item && attacker.item.includes('Drive')) {
     type = getTechnoBlast(attacker.item)!;
@@ -215,7 +333,7 @@ export function calculateSMSSSV(
   let isNormalize = false;
   const noTypeChange = move.named(
     'Revelation Dance',
-    'Judgment',
+    '',
     'Nature Power',
     'Techno Blast',
     'Multi Attack',
@@ -255,7 +373,7 @@ export function calculateSMSSSV(
   move.type = type;
 
   // FIXME: this is incorrect, should be move.flags.heal, not move.drain
-  if ((attacker.hasAbility('Triage') && move.drain) ||
+  if ((attacker.hasAbility('Rapid Fire') && (move.flags as any).heal) ||
       (attacker.hasAbility('Gale Wings') &&
        move.hasType('Flying') &&
        attacker.curHP() === attacker.maxHP())) {
@@ -348,7 +466,7 @@ export function calculateSMSSSV(
         !field.isGravity && !move.named('Thousand Arrows') &&
         !defender.hasItem('Iron Ball') && defender.hasAbility('Levitate')) ||
       (move.flags.bullet && defender.hasAbility('Bulletproof')) ||
-      (move.flags.sound && !move.named('Clangorous Soul') && defender.hasAbility('Soundproof')) ||
+      (move.flags.sound && !move.named('Clangorous Soul') && defender.hasAbility('Sinister')) ||
       (move.priority > 0 && defender.hasAbility('Queenly Majesty', 'Dazzling', 'Armor Tail')) ||
       (move.hasType('Ground') && defender.hasAbility('Earth Eater')) ||
       (move.flags.wind && defender.hasAbility('Wind Rider'))
@@ -377,7 +495,7 @@ export function calculateSMSSSV(
 
   const fixedDamage = handleFixedDamageMoves(attacker, move);
   if (fixedDamage) {
-    if (attacker.hasAbility('Parental Bond')) {
+    if (attacker.hasAbility('Expertise')) {
       result.damage = [fixedDamage, fixedDamage];
       desc.attackerAbility = attacker.ability;
     } else {
@@ -400,7 +518,7 @@ export function calculateSMSSSV(
     return result;
   }
 
-  if (move.named('Nature\'s Madness')) {
+  if (move.named('Cosmic Chaos')) {
     const lostHP = field.defenderSide.isProtected ? 0 : Math.floor(defender.curHP() / 2);
     result.damage = lostHP;
     return result;
@@ -447,7 +565,7 @@ export function calculateSMSSSV(
   // #region (Special) Attack
   const attack = calculateAttackSMSSSV(gen, attacker, defender, move, field, desc, isCritical);
   const attackSource = move.named('Foul Play') ? defender : attacker;
-  if (move.named('Photon Geyser', 'Light That Burns The Sky') ||
+  if (move.named('Twilight Cannon', 'Light That Burns The Sky') ||
       (move.named('Tera Blast') && attackSource.teraType)) {
     move.category = attackSource.stats.atk > attackSource.stats.spa ? 'Physical' : 'Special';
   }
@@ -497,7 +615,7 @@ export function calculateSMSSSV(
   let stabMod = 4096;
   if (attacker.hasOriginalType(move.type)) {
     stabMod += 2048;
-  } else if (attacker.hasAbility('Protean', 'Libero') && !attacker.teraType) {
+  } else if (attacker.hasAbility('Versatility', 'Libero') && !attacker.teraType) {
     stabMod += 2048;
     desc.attackerAbility = attacker.ability;
   }
@@ -541,9 +659,9 @@ export function calculateSMSSSV(
      ['allAdjacent', 'allAdjacentFoes'].includes(move.target);
 
   let childDamage: number[] | undefined;
-  if (attacker.hasAbility('Parental Bond') && move.hits === 1 && !isSpread) {
+  if (attacker.hasAbility('Expertise') && move.hits === 1 && !isSpread) {
     const child = attacker.clone();
-    child.ability = 'Parental Bond (Child)' as AbilityName;
+    child.ability = 'Expertise (Child)' as AbilityName;
     checkMultihitBoost(gen, child, defender, move, field, desc);
     childDamage = calculateSMSSSV(gen, child, defender, move, field).damage as number[];
     desc.attackerAbility = attacker.ability;
@@ -746,8 +864,8 @@ export function calculateBasePowerSMSSSV(
     desc.moveBP = basePower;
     break;
   case 'Assurance':
-    basePower = move.bp * (defender.hasAbility('Parental Bond (Child)') ? 2 : 1);
-    // NOTE: desc.attackerAbility = 'Parental Bond' will already reflect this boost
+    basePower = move.bp * (defender.hasAbility('Expertise (Child)') ? 2 : 1);
+    // NOTE: desc.attackerAbility = 'Expertise' will already reflect this boost
     break;
   case 'Wake-Up Slap':
     // Wake-Up Slap deals double damage to Pokemon with Comatose (ih8ih8sn0w)
@@ -815,11 +933,11 @@ export function calculateBasePowerSMSSSV(
       desc.moveName = 'Thunderbolt';
       break;
     case 'Grassy':
-      basePower = 90;
+      basePower = 95;
       desc.moveName = 'Energy Ball';
       break;
     case 'Misty':
-      basePower = 95;
+      basePower = 100;
       desc.moveName = 'Moonblast';
       break;
     case 'Psychic':
@@ -827,7 +945,8 @@ export function calculateBasePowerSMSSSV(
       desc.moveName = 'Psychic';
       break;
     default:
-      basePower = 80;
+      basePower = 35;
+      move.hits = 3;
       desc.moveName = 'Tri Attack';
     }
     break;
@@ -1091,7 +1210,7 @@ export function calculateBPModsSMSSSV(
   }
 
   if ((attacker.hasAbility('Reckless') && (move.recoil || move.hasCrashDamage)) ||
-      (attacker.hasAbility('Iron Fist') && move.flags.punch)
+      (attacker.hasAbility('Amplifier') && move.flags.punch)
   ) {
     bpMods.push(4915);
     desc.attackerAbility = attacker.ability;
@@ -1122,6 +1241,15 @@ export function calculateBPModsSMSSSV(
   if (attacker.hasItem(`${move.type} Gem`)) {
     bpMods.push(5325);
     desc.attackerItem = attacker.item;
+  } else if (attacker.hasItem("Dragon Fang") && move.hasType("Dragon")) {
+    bpMods.push(5325);
+    desc.attackerItem = attacker.item;
+  } else if (attacker.hasItem('Adamant Orb') && attacker.named('Dialga') && move.hasType('Steel', 'Dragon')) {
+    bpMods.push(6144);
+    desc.attackerItem = attacker.item;
+  } else if (attacker.hasItem('Lustrous Orb') && attacker.named('Palkia') && move.hasType('Water', 'Dragon')) {
+    bpMods.push(6144);
+    desc.attackerItem = attacker.item;
   } else if (
     (((attacker.hasItem('Adamant Crystal') && attacker.named('Dialga-Origin')) ||
       (attacker.hasItem('Adamant Orb') && attacker.named('Dialga'))) &&
@@ -1167,7 +1295,7 @@ export function calculateAttackSMSSSV(
 ) {
   let attack: number;
   const attackSource = move.named('Foul Play') ? defender : attacker;
-  if (move.named('Photon Geyser', 'Light That Burns The Sky') ||
+  if (move.named('Twilight Cannon', 'Light That Burns The Sky') ||
       (move.named('Tera Blast') && attackSource.teraType)) {
     move.category = attackSource.stats.atk > attackSource.stats.spa ? 'Physical' : 'Special';
   }
@@ -1251,7 +1379,7 @@ export function calculateAtModsSMSSSV(
        (attacker.hasAbility('Blaze') && move.hasType('Fire')) ||
        (attacker.hasAbility('Torrent') && move.hasType('Water')) ||
        (attacker.hasAbility('Swarm') && move.hasType('Bug')))) ||
-    (move.category === 'Special' && attacker.abilityOn && attacker.hasAbility('Plus', 'Minus'))
+    (move.category === 'Special' && attacker.abilityOn && attacker.hasAbility('Interstellar', 'Evoboost'))
   ) {
     atMods.push(6144);
     desc.attackerAbility = attacker.ability;
@@ -1272,7 +1400,7 @@ export function calculateAtModsSMSSSV(
     atMods.push(8192);
     desc.attackerAbility = attacker.ability;
   } else if (
-    (attacker.hasAbility('Water Bubble') && move.hasType('Water')) ||
+    (attacker.hasAbility('Liquid Veil') && move.hasType('Water')) ||
     (attacker.hasAbility('Huge Power', 'Pure Power') && move.category === 'Physical')
   ) {
     atMods.push(8192);
@@ -1280,7 +1408,7 @@ export function calculateAtModsSMSSSV(
   }
 
   if ((defender.hasAbility('Thick Fat') && move.hasType('Fire', 'Ice')) ||
-      (defender.hasAbility('Water Bubble') && move.hasType('Fire')) ||
+      (defender.hasAbility('Liquid Veil') && move.hasType('Fire')) ||
      (defender.hasAbility('Purifying Salt') && move.hasType('Ghost'))) {
     atMods.push(2048);
     desc.defenderAbility = defender.ability;
@@ -1429,7 +1557,7 @@ export function calculateDfModsSMSSSV(
     desc.weather = field.weather;
     desc.isFlowerGiftDefender = true;
   } else if (
-    defender.hasAbility('Grass Pelt') &&
+    defender.hasAbility('Grassy Guard') &&
     field.hasTerrain('Grassy') &&
     hitsPhysical
   ) {
@@ -1500,7 +1628,7 @@ function calculateBaseDamageSMSSSV(
     baseDamage = pokeRound(OF32(baseDamage * 3072) / 4096);
   }
 
-  if (attacker.hasAbility('Parental Bond (Child)')) {
+  if (attacker.hasAbility('Expertise (Child)')) {
     baseDamage = pokeRound(OF32(baseDamage * 1024) / 4096);
   }
 
@@ -1567,7 +1695,7 @@ export function calculateFinalModsSMSSSV(
   if (attacker.hasAbility('Neuroforce') && typeEffectiveness > 1) {
     finalMods.push(5120);
     desc.attackerAbility = attacker.ability;
-  } else if (attacker.hasAbility('Sniper') && isCritical) {
+  } else if (attacker.hasAbility('Ruthless') && isCritical) {
     finalMods.push(6144);
     desc.attackerAbility = attacker.ability;
   } else if (attacker.hasAbility('Tinted Lens') && typeEffectiveness < 1) {
@@ -1579,11 +1707,11 @@ export function calculateFinalModsSMSSSV(
     finalMods.push(8192);
   }
 
-  if (defender.hasAbility('Multiscale', 'Shadow Shield') &&
+  if (defender.hasAbility('Energy Shield', 'Shadow Shield') &&
       defender.curHP() === defender.maxHP() &&
       hitCount === 0 &&
       (!field.defenderSide.isSR && (!field.defenderSide.spikes || defender.hasType('Flying')) ||
-      defender.hasItem('Heavy-Duty Boots')) && !attacker.hasAbility('Parental Bond (Child)')
+      defender.hasItem('Heavy-Duty Boots')) && !attacker.hasAbility('Expertise (Child)')
   ) {
     finalMods.push(2048);
     desc.defenderAbility = defender.ability;
@@ -1600,7 +1728,7 @@ export function calculateFinalModsSMSSSV(
     desc.defenderAbility = defender.ability;
   }
 
-  if (defender.hasAbility('Solid Rock', 'Filter', 'Prism Armor') && typeEffectiveness > 1) {
+  if (defender.hasAbility('Solid Rock', 'Resilient', 'Prism Armor') && typeEffectiveness > 1) {
     finalMods.push(3072);
     desc.defenderAbility = defender.ability;
   }
@@ -1616,7 +1744,7 @@ export function calculateFinalModsSMSSSV(
   }
 
   if (attacker.hasItem('Expert Belt') && typeEffectiveness > 1 && !move.isZ) {
-    finalMods.push(4915);
+    finalMods.push(5120);
     desc.attackerItem = attacker.item;
   } else if (attacker.hasItem('Life Orb')) {
     finalMods.push(5324);
